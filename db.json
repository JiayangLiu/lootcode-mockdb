{
  "problems": [
  {
    "id": 1,
    "name": "Two Sum",
    "difficulty": "easy"
  },
  {
    "id": 2,
    "name": "Add Two Numbers",
    "difficulty": "medium"
  },
  {
    "id": 3,
    "name": "Longest Substring Without Repeating Characters",
    "difficulty": "medium"
  },
  {
    "id": 4,
    "name": "Median of Two Sorted Arrays",
    "difficulty": "hard"
  },
  {
    "id": 5,
    "name": "Longest Palindromic Substring",
    "difficulty": "medium"
  },
  {
    "id": 6,
    "name": "ZigZag Conversion",
    "difficulty": "medium"
  },
  {
    "id": 7,
    "name": "Reverse Integer",
    "difficulty": "easy"
  },
  {
    "id": 8,
    "name": "String to Integer (atoi)",
    "difficulty": "medium"
  },
  {
    "id": 9,
    "name": "Palindrome Number",
    "difficulty": "easy"
  },
  {
    "id": 10,
    "name": "Regular Expression Matching",
    "difficulty": "hard"
  },
  {
    "id": 11,
    "name": "Container With Most Water",
    "difficulty": "medium"
  },
  {
    "id": 12,
    "name": "Integer to Roman",
    "difficulty": "medium"
  },
  {
    "id": 13,
    "name": "Roman to Integer",
    "difficulty": "easy"
  },
  {
    "id": 14,
    "name": "Longest Common Prefix",
    "difficulty": "easy"
  },
  {
    "id": 15,
    "name": "3Sum",
    "difficulty": "medium"
  },
  {
    "id": 16,
    "name": "3Sum Closest",
    "difficulty": "medium"
  },
  {
    "id": 17,
    "name": "Letter Combinations of a Phone Number",
    "difficulty": "medium"
  },
  {
    "id": 18,
    "name": "4Sum",
    "difficulty": "medium"
  },
  {
    "id": 19,
    "name": "Remove Nth Node From End of List",
    "difficulty": "medium"
  },
  {
    "id": 20,
    "name": "Valid Parenthese",
    "difficulty": "easy"
  }
  ],
  "problem":
  {
    "id": 1,
    "name": "Two Sum",
    "desc": " Given an array of integers, return indices of the two numbers such that they add up to a specific target. \n You may assume that each input would have exactly one solution, and you may not use the same element twice. \n Example: \n Given nums = [2, 7, 11, 15], target = 9, \n Because nums[0] + nums[1] = 2 + 7 = 9, \n return [0, 1]. ",
    "difficulty": "easy",
    "company": "Google",
    "tag": "Dynamic Programming",
    "code": [
      {
        "isAccepted": true,
        "performance": 1,
        "code_language": "java",
        "time_created": "1970-01-01 00:00:01",
        "time_modified": "1970-01-01 00:00:01",
        "content": "System.out.println(\"Helloworld\")",
        "note":
        {
          "content":"I love Java",
          "time_created": "1970-01-01 00:00:01",
          "time_modified": "1970-01-01 00:00:01"
        }
      },
      {
        "isAccepted": false,
        "performance": 0.01,
        "code_language": "C++",
        "time_created": "1970-01-01 00:00:01",
        "time_modified": "1970-01-01 00:00:01",
        "content": "cout << \"Helloworld\"",
        "note":
        {
          "content":"I love c++",
          "time_created": "1970-01-01 00:00:01",
          "time_modified": "1970-01-01 00:00:01"
        }
      }
    ]
  }
}
